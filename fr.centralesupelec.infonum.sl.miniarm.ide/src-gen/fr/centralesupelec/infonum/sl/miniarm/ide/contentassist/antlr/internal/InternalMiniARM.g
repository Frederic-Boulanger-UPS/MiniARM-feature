/*
 * generated by Xtext 2.27.0
 */
grammar InternalMiniARM;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.centralesupelec.infonum.sl.miniarm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.centralesupelec.infonum.sl.miniarm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.centralesupelec.infonum.sl.miniarm.services.MiniARMGrammarAccess;

}
@parser::members {
	private MiniARMGrammarAccess grammarAccess;

	public void setGrammarAccess(MiniARMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getLinesAssignment()); }
		(rule__Program__LinesAssignment)*
		{ after(grammarAccess.getProgramAccess().getLinesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLine
entryRuleLine
:
{ before(grammarAccess.getLineRule()); }
	 ruleLine
{ after(grammarAccess.getLineRule()); } 
	 EOF 
;

// Rule Line
ruleLine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLineAccess().getAlternatives()); }
		(rule__Line__Alternatives)
		{ after(grammarAccess.getLineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInclude
entryRuleInclude
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncludeAccess().getGroup()); }
		(rule__Include__Group__0)
		{ after(grammarAccess.getIncludeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabelDef
entryRuleLabelDef
:
{ before(grammarAccess.getLabelDefRule()); }
	 ruleLabelDef
{ after(grammarAccess.getLabelDefRule()); } 
	 EOF 
;

// Rule LabelDef
ruleLabelDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelDefAccess().getGroup()); }
		(rule__LabelDef__Group__0)
		{ after(grammarAccess.getLabelDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabel
entryRuleLabel
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getNameAssignment()); }
		(rule__Label__NameAssignment)
		{ after(grammarAccess.getLabelAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssemblyInst
entryRuleAssemblyInst
:
{ before(grammarAccess.getAssemblyInstRule()); }
	 ruleAssemblyInst
{ after(grammarAccess.getAssemblyInstRule()); } 
	 EOF 
;

// Rule AssemblyInst
ruleAssemblyInst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssemblyInstAccess().getAlternatives()); }
		(rule__AssemblyInst__Alternatives)
		{ after(grammarAccess.getAssemblyInstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePseudoInst
entryRulePseudoInst
:
{ before(grammarAccess.getPseudoInstRule()); }
	 rulePseudoInst
{ after(grammarAccess.getPseudoInstRule()); } 
	 EOF 
;

// Rule PseudoInst
rulePseudoInst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPseudoInstAccess().getAlternatives()); }
		(rule__PseudoInst__Alternatives)
		{ after(grammarAccess.getPseudoInstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealInst
entryRuleRealInst
:
{ before(grammarAccess.getRealInstRule()); }
	 ruleRealInst
{ after(grammarAccess.getRealInstRule()); } 
	 EOF 
;

// Rule RealInst
ruleRealInst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealInstAccess().getAlternatives()); }
		(rule__RealInst__Alternatives)
		{ after(grammarAccess.getRealInstAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRMW
entryRuleRMW
:
{ before(grammarAccess.getRMWRule()); }
	 ruleRMW
{ after(grammarAccess.getRMWRule()); } 
	 EOF 
;

// Rule RMW
ruleRMW 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRMWAccess().getGroup()); }
		(rule__RMW__Group__0)
		{ after(grammarAccess.getRMWAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSMW
entryRuleSMW
:
{ before(grammarAccess.getSMWRule()); }
	 ruleSMW
{ after(grammarAccess.getSMWRule()); } 
	 EOF 
;

// Rule SMW
ruleSMW 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSMWAccess().getGroup()); }
		(rule__SMW__Group__0)
		{ after(grammarAccess.getSMWAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSMS
entryRuleSMS
:
{ before(grammarAccess.getSMSRule()); }
	 ruleSMS
{ after(grammarAccess.getSMSRule()); } 
	 EOF 
;

// Rule SMS
ruleSMS 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSMSAccess().getGroup()); }
		(rule__SMS__Group__0)
		{ after(grammarAccess.getSMSAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePUSH
entryRulePUSH
:
{ before(grammarAccess.getPUSHRule()); }
	 rulePUSH
{ after(grammarAccess.getPUSHRule()); } 
	 EOF 
;

// Rule PUSH
rulePUSH 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPUSHAccess().getGroup()); }
		(rule__PUSH__Group__0)
		{ after(grammarAccess.getPUSHAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePOP
entryRulePOP
:
{ before(grammarAccess.getPOPRule()); }
	 rulePOP
{ after(grammarAccess.getPOPRule()); } 
	 EOF 
;

// Rule POP
rulePOP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPOPAccess().getGroup()); }
		(rule__POP__Group__0)
		{ after(grammarAccess.getPOPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLOAD
entryRuleLOAD
:
{ before(grammarAccess.getLOADRule()); }
	 ruleLOAD
{ after(grammarAccess.getLOADRule()); } 
	 EOF 
;

// Rule LOAD
ruleLOAD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLOADAccess().getGroup()); }
		(rule__LOAD__Group__0)
		{ after(grammarAccess.getLOADAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegister
entryRuleRegister
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterAccess().getAlternatives()); }
		(rule__Register__Alternatives)
		{ after(grammarAccess.getRegisterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImmediate
entryRuleImmediate
:
{ before(grammarAccess.getImmediateRule()); }
	 ruleImmediate
{ after(grammarAccess.getImmediateRule()); } 
	 EOF 
;

// Rule Immediate
ruleImmediate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImmediateAccess().getGroup()); }
		(rule__Immediate__Group__0)
		{ after(grammarAccess.getImmediateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getNumAssignment()); }
		(rule__Const__NumAssignment)
		{ after(grammarAccess.getConstAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHexConst
entryRuleHexConst
:
{ before(grammarAccess.getHexConstRule()); }
	 ruleHexConst
{ after(grammarAccess.getHexConstRule()); } 
	 EOF 
;

// Rule HexConst
ruleHexConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHexConstAccess().getNumAssignment()); }
		(rule__HexConst__NumAssignment)
		{ after(grammarAccess.getHexConstAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirect
entryRuleDirect
:
{ before(grammarAccess.getDirectRule()); }
	 ruleDirect
{ after(grammarAccess.getDirectRule()); } 
	 EOF 
;

// Rule Direct
ruleDirect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectAccess().getAddressAssignment()); }
		(rule__Direct__AddressAssignment)
		{ after(grammarAccess.getDirectAccess().getAddressAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDirectReg
entryRuleDirectReg
:
{ before(grammarAccess.getDirectRegRule()); }
	 ruleDirectReg
{ after(grammarAccess.getDirectRegRule()); } 
	 EOF 
;

// Rule DirectReg
ruleDirectReg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectRegAccess().getGroup()); }
		(rule__DirectReg__Group__0)
		{ after(grammarAccess.getDirectRegAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTORE
entryRuleSTORE
:
{ before(grammarAccess.getSTORERule()); }
	 ruleSTORE
{ after(grammarAccess.getSTORERule()); } 
	 EOF 
;

// Rule STORE
ruleSTORE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTOREAccess().getGroup()); }
		(rule__STORE__Group__0)
		{ after(grammarAccess.getSTOREAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddress
entryRuleAddress
:
{ before(grammarAccess.getAddressRule()); }
	 ruleAddress
{ after(grammarAccess.getAddressRule()); } 
	 EOF 
;

// Rule Address
ruleAddress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddressAccess().getAlternatives()); }
		(rule__Address__Alternatives)
		{ after(grammarAccess.getAddressAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMOVE
entryRuleMOVE
:
{ before(grammarAccess.getMOVERule()); }
	 ruleMOVE
{ after(grammarAccess.getMOVERule()); } 
	 EOF 
;

// Rule MOVE
ruleMOVE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMOVEAccess().getGroup()); }
		(rule__MOVE__Group__0)
		{ after(grammarAccess.getMOVEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveValue
entryRuleMoveValue
:
{ before(grammarAccess.getMoveValueRule()); }
	 ruleMoveValue
{ after(grammarAccess.getMoveValueRule()); } 
	 EOF 
;

// Rule MoveValue
ruleMoveValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveValueAccess().getAlternatives()); }
		(rule__MoveValue__Alternatives)
		{ after(grammarAccess.getMoveValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleADD
entryRuleADD
:
{ before(grammarAccess.getADDRule()); }
	 ruleADD
{ after(grammarAccess.getADDRule()); } 
	 EOF 
;

// Rule ADD
ruleADD 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getADDAccess().getGroup()); }
		(rule__ADD__Group__0)
		{ after(grammarAccess.getADDAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSUB
entryRuleSUB
:
{ before(grammarAccess.getSUBRule()); }
	 ruleSUB
{ after(grammarAccess.getSUBRule()); } 
	 EOF 
;

// Rule SUB
ruleSUB 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSUBAccess().getGroup()); }
		(rule__SUB__Group__0)
		{ after(grammarAccess.getSUBAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCMP
entryRuleCMP
:
{ before(grammarAccess.getCMPRule()); }
	 ruleCMP
{ after(grammarAccess.getCMPRule()); } 
	 EOF 
;

// Rule CMP
ruleCMP 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCMPAccess().getGroup()); }
		(rule__CMP__Group__0)
		{ after(grammarAccess.getCMPAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBEQ
entryRuleBEQ
:
{ before(grammarAccess.getBEQRule()); }
	 ruleBEQ
{ after(grammarAccess.getBEQRule()); } 
	 EOF 
;

// Rule BEQ
ruleBEQ 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBEQAccess().getGroup()); }
		(rule__BEQ__Group__0)
		{ after(grammarAccess.getBEQAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBranchAddress
entryRuleBranchAddress
:
{ before(grammarAccess.getBranchAddressRule()); }
	 ruleBranchAddress
{ after(grammarAccess.getBranchAddressRule()); } 
	 EOF 
;

// Rule BranchAddress
ruleBranchAddress 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBranchAddressAccess().getAlternatives()); }
		(rule__BranchAddress__Alternatives)
		{ after(grammarAccess.getBranchAddressAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBLT
entryRuleBLT
:
{ before(grammarAccess.getBLTRule()); }
	 ruleBLT
{ after(grammarAccess.getBLTRule()); } 
	 EOF 
;

// Rule BLT
ruleBLT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBLTAccess().getGroup()); }
		(rule__BLT__Group__0)
		{ after(grammarAccess.getBLTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBRANCH
entryRuleBRANCH
:
{ before(grammarAccess.getBRANCHRule()); }
	 ruleBRANCH
{ after(grammarAccess.getBRANCHRule()); } 
	 EOF 
;

// Rule BRANCH
ruleBRANCH 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBRANCHAccess().getGroup()); }
		(rule__BRANCH__Group__0)
		{ after(grammarAccess.getBRANCHAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBLINK
entryRuleBLINK
:
{ before(grammarAccess.getBLINKRule()); }
	 ruleBLINK
{ after(grammarAccess.getBLINKRule()); } 
	 EOF 
;

// Rule BLINK
ruleBLINK 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBLINKAccess().getGroup()); }
		(rule__BLINK__Group__0)
		{ after(grammarAccess.getBLINKAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getIncludeParserRuleCall_0()); }
		ruleInclude
		{ after(grammarAccess.getLineAccess().getIncludeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLineAccess().getGroup_1()); }
		(rule__Line__Group_1__0)
		{ after(grammarAccess.getLineAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Alternatives_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getNLTerminalRuleCall_1_3_0()); }
		RULE_NL
		{ after(grammarAccess.getLineAccess().getNLTerminalRuleCall_1_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getLineAccess().getCommentAssignment_1_3_1()); }
		(rule__Line__CommentAssignment_1_3_1)
		{ after(grammarAccess.getLineAccess().getCommentAssignment_1_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getAssemblyInstParserRuleCall_0()); }
		ruleAssemblyInst
		{ after(grammarAccess.getInstructionAccess().getAssemblyInstParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getPseudoInstParserRuleCall_1()); }
		rulePseudoInst
		{ after(grammarAccess.getInstructionAccess().getPseudoInstParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getRealInstParserRuleCall_2()); }
		ruleRealInst
		{ after(grammarAccess.getInstructionAccess().getRealInstParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssemblyInst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssemblyInstAccess().getRMWParserRuleCall_0()); }
		ruleRMW
		{ after(grammarAccess.getAssemblyInstAccess().getRMWParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssemblyInstAccess().getSMWParserRuleCall_1()); }
		ruleSMW
		{ after(grammarAccess.getAssemblyInstAccess().getSMWParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssemblyInstAccess().getSMSParserRuleCall_2()); }
		ruleSMS
		{ after(grammarAccess.getAssemblyInstAccess().getSMSParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoInst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPseudoInstAccess().getPUSHParserRuleCall_0()); }
		rulePUSH
		{ after(grammarAccess.getPseudoInstAccess().getPUSHParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPseudoInstAccess().getPOPParserRuleCall_1()); }
		rulePOP
		{ after(grammarAccess.getPseudoInstAccess().getPOPParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealInst__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealInstAccess().getLOADParserRuleCall_0()); }
		ruleLOAD
		{ after(grammarAccess.getRealInstAccess().getLOADParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getSTOREParserRuleCall_1()); }
		ruleSTORE
		{ after(grammarAccess.getRealInstAccess().getSTOREParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getMOVEParserRuleCall_2()); }
		ruleMOVE
		{ after(grammarAccess.getRealInstAccess().getMOVEParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getADDParserRuleCall_3()); }
		ruleADD
		{ after(grammarAccess.getRealInstAccess().getADDParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getSUBParserRuleCall_4()); }
		ruleSUB
		{ after(grammarAccess.getRealInstAccess().getSUBParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getCMPParserRuleCall_5()); }
		ruleCMP
		{ after(grammarAccess.getRealInstAccess().getCMPParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getBEQParserRuleCall_6()); }
		ruleBEQ
		{ after(grammarAccess.getRealInstAccess().getBEQParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getBLTParserRuleCall_7()); }
		ruleBLT
		{ after(grammarAccess.getRealInstAccess().getBLTParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getBRANCHParserRuleCall_8()); }
		ruleBRANCH
		{ after(grammarAccess.getRealInstAccess().getBRANCHParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getRealInstAccess().getBLINKParserRuleCall_9()); }
		ruleBLINK
		{ after(grammarAccess.getRealInstAccess().getBLINKParserRuleCall_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_0()); }
		(rule__Register__NameAssignment_0)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
		(rule__Register__NameAssignment_1)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_2()); }
		(rule__Register__NameAssignment_2)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_3()); }
		(rule__Register__NameAssignment_3)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_4()); }
		(rule__Register__NameAssignment_4)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_5()); }
		(rule__Register__NameAssignment_5)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_5()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_6()); }
		(rule__Register__NameAssignment_6)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_6()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_7()); }
		(rule__Register__NameAssignment_7)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_7()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_8()); }
		(rule__Register__NameAssignment_8)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_8()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterAccess().getNameAssignment_9()); }
		(rule__Register__NameAssignment_9)
		{ after(grammarAccess.getRegisterAccess().getNameAssignment_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getConstParserRuleCall_0()); }
		ruleConst
		{ after(grammarAccess.getValueAccess().getConstParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getHexConstParserRuleCall_1()); }
		ruleHexConst
		{ after(grammarAccess.getValueAccess().getHexConstParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getLabelAssignment_2()); }
		(rule__Value__LabelAssignment_2)
		{ after(grammarAccess.getValueAccess().getLabelAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Address__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddressAccess().getDirectParserRuleCall_0()); }
		ruleDirect
		{ after(grammarAccess.getAddressAccess().getDirectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddressAccess().getDirectRegParserRuleCall_1()); }
		ruleDirectReg
		{ after(grammarAccess.getAddressAccess().getDirectRegParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveValueAccess().getImmediateParserRuleCall_0()); }
		ruleImmediate
		{ after(grammarAccess.getMoveValueAccess().getImmediateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveValueAccess().getRegisterParserRuleCall_1()); }
		ruleRegister
		{ after(grammarAccess.getMoveValueAccess().getRegisterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchAddress__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBranchAddressAccess().getValueParserRuleCall_0()); }
		ruleValue
		{ after(grammarAccess.getBranchAddressAccess().getValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBranchAddressAccess().getRegisterParserRuleCall_1()); }
		ruleRegister
		{ after(grammarAccess.getBranchAddressAccess().getRegisterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group_1__0__Impl
	rule__Line__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getLineAction_1_0()); }
	()
	{ after(grammarAccess.getLineAccess().getLineAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group_1__1__Impl
	rule__Line__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getLabelDefAssignment_1_1()); }
	(rule__Line__LabelDefAssignment_1_1)?
	{ after(grammarAccess.getLineAccess().getLabelDefAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group_1__2__Impl
	rule__Line__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getInstAssignment_1_2()); }
	(rule__Line__InstAssignment_1_2)?
	{ after(grammarAccess.getLineAccess().getInstAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Line__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLineAccess().getAlternatives_1_3()); }
	(rule__Line__Alternatives_1_3)
	{ after(grammarAccess.getLineAccess().getAlternatives_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
	'include'
	{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getFileNameAssignment_1()); }
	(rule__Include__FileNameAssignment_1)
	{ after(grammarAccess.getIncludeAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncludeAccess().getNLTerminalRuleCall_2()); }
	RULE_NL
	{ after(grammarAccess.getIncludeAccess().getNLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LabelDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LabelDef__Group__0__Impl
	rule__LabelDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabelDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelDefAccess().getCommercialAtKeyword_0()); }
	'@'
	{ after(grammarAccess.getLabelDefAccess().getCommercialAtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LabelDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LabelDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabelDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelDefAccess().getLabelAssignment_1()); }
	(rule__LabelDef__LabelAssignment_1)
	{ after(grammarAccess.getLabelDefAccess().getLabelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RMW__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMW__Group__0__Impl
	rule__RMW__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RMW__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMWAccess().getRmwKeyword_0()); }
	'rmw'
	{ after(grammarAccess.getRMWAccess().getRmwKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMW__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RMW__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RMW__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRMWAccess().getSizeAssignment_1()); }
	(rule__RMW__SizeAssignment_1)
	{ after(grammarAccess.getRMWAccess().getSizeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SMW__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SMW__Group__0__Impl
	rule__SMW__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SMW__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSMWAccess().getSmwKeyword_0()); }
	'smw'
	{ after(grammarAccess.getSMWAccess().getSmwKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SMW__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SMW__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SMW__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSMWAccess().getValueAssignment_1()); }
	(rule__SMW__ValueAssignment_1)
	{ after(grammarAccess.getSMWAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SMS__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SMS__Group__0__Impl
	rule__SMS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SMS__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSMSAccess().getSmwKeyword_0()); }
	'smw'
	{ after(grammarAccess.getSMSAccess().getSmwKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SMS__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SMS__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SMS__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSMSAccess().getValueAssignment_1()); }
	(rule__SMS__ValueAssignment_1)
	{ after(grammarAccess.getSMSAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PUSH__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PUSH__Group__0__Impl
	rule__PUSH__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PUSH__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPUSHAccess().getPushKeyword_0()); }
	'push'
	{ after(grammarAccess.getPUSHAccess().getPushKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PUSH__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PUSH__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PUSH__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPUSHAccess().getRegAssignment_1()); }
	(rule__PUSH__RegAssignment_1)
	{ after(grammarAccess.getPUSHAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__POP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POP__Group__0__Impl
	rule__POP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__POP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOPAccess().getPopKeyword_0()); }
	'pop'
	{ after(grammarAccess.getPOPAccess().getPopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__POP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__POP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__POP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPOPAccess().getRegAssignment_1()); }
	(rule__POP__RegAssignment_1)
	{ after(grammarAccess.getPOPAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LOAD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LOAD__Group__0__Impl
	rule__LOAD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLOADAccess().getLdrKeyword_0()); }
	'ldr'
	{ after(grammarAccess.getLOADAccess().getLdrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LOAD__Group__1__Impl
	rule__LOAD__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLOADAccess().getRegAssignment_1()); }
	(rule__LOAD__RegAssignment_1)
	{ after(grammarAccess.getLOADAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LOAD__Group__2__Impl
	rule__LOAD__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLOADAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getLOADAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LOAD__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLOADAccess().getAddressAssignment_3()); }
	(rule__LOAD__AddressAssignment_3)
	{ after(grammarAccess.getLOADAccess().getAddressAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Immediate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__0__Impl
	rule__Immediate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getNumberSignKeyword_0()); }
	'#'
	{ after(grammarAccess.getImmediateAccess().getNumberSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Immediate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImmediateAccess().getValueAssignment_1()); }
	(rule__Immediate__ValueAssignment_1)
	{ after(grammarAccess.getImmediateAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DirectReg__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectReg__Group__0__Impl
	rule__DirectReg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRegAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getDirectRegAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectReg__Group__1__Impl
	rule__DirectReg__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRegAccess().getRegAssignment_1()); }
	(rule__DirectReg__RegAssignment_1)
	{ after(grammarAccess.getDirectRegAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DirectReg__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectRegAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getDirectRegAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__STORE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STORE__Group__0__Impl
	rule__STORE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOREAccess().getStrKeyword_0()); }
	'str'
	{ after(grammarAccess.getSTOREAccess().getStrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STORE__Group__1__Impl
	rule__STORE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOREAccess().getRegAssignment_1()); }
	(rule__STORE__RegAssignment_1)
	{ after(grammarAccess.getSTOREAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STORE__Group__2__Impl
	rule__STORE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOREAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getSTOREAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__STORE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSTOREAccess().getAddressAssignment_3()); }
	(rule__STORE__AddressAssignment_3)
	{ after(grammarAccess.getSTOREAccess().getAddressAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MOVE__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVE__Group__0__Impl
	rule__MOVE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVEAccess().getMovKeyword_0()); }
	'mov'
	{ after(grammarAccess.getMOVEAccess().getMovKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVE__Group__1__Impl
	rule__MOVE__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVEAccess().getDstAssignment_1()); }
	(rule__MOVE__DstAssignment_1)
	{ after(grammarAccess.getMOVEAccess().getDstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVE__Group__2__Impl
	rule__MOVE__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVEAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMOVEAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MOVE__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMOVEAccess().getSrcAssignment_3()); }
	(rule__MOVE__SrcAssignment_3)
	{ after(grammarAccess.getMOVEAccess().getSrcAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ADD__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__0__Impl
	rule__ADD__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getADDAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__1__Impl
	rule__ADD__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getDstAssignment_1()); }
	(rule__ADD__DstAssignment_1)
	{ after(grammarAccess.getADDAccess().getDstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__2__Impl
	rule__ADD__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getADDAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__3__Impl
	rule__ADD__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getSrc1Assignment_3()); }
	(rule__ADD__Src1Assignment_3)
	{ after(grammarAccess.getADDAccess().getSrc1Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__4__Impl
	rule__ADD__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getADDAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ADD__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getADDAccess().getSrc2Assignment_5()); }
	(rule__ADD__Src2Assignment_5)
	{ after(grammarAccess.getADDAccess().getSrc2Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SUB__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__0__Impl
	rule__SUB__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getSubKeyword_0()); }
	'sub'
	{ after(grammarAccess.getSUBAccess().getSubKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__1__Impl
	rule__SUB__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getDstAssignment_1()); }
	(rule__SUB__DstAssignment_1)
	{ after(grammarAccess.getSUBAccess().getDstAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__2__Impl
	rule__SUB__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getSUBAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__3__Impl
	rule__SUB__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getSrc1Assignment_3()); }
	(rule__SUB__Src1Assignment_3)
	{ after(grammarAccess.getSUBAccess().getSrc1Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__4__Impl
	rule__SUB__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getSUBAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SUB__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSUBAccess().getSrc2Assignment_5()); }
	(rule__SUB__Src2Assignment_5)
	{ after(grammarAccess.getSUBAccess().getSrc2Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CMP__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CMP__Group__0__Impl
	rule__CMP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCMPAccess().getCmpKeyword_0()); }
	'cmp'
	{ after(grammarAccess.getCMPAccess().getCmpKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CMP__Group__1__Impl
	rule__CMP__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCMPAccess().getSrc1Assignment_1()); }
	(rule__CMP__Src1Assignment_1)
	{ after(grammarAccess.getCMPAccess().getSrc1Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CMP__Group__2__Impl
	rule__CMP__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCMPAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getCMPAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CMP__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCMPAccess().getSrc2Assignment_3()); }
	(rule__CMP__Src2Assignment_3)
	{ after(grammarAccess.getCMPAccess().getSrc2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BEQ__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BEQ__Group__0__Impl
	rule__BEQ__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BEQ__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBEQAccess().getBeqKeyword_0()); }
	'beq'
	{ after(grammarAccess.getBEQAccess().getBeqKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BEQ__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BEQ__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BEQ__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBEQAccess().getDestAssignment_1()); }
	(rule__BEQ__DestAssignment_1)
	{ after(grammarAccess.getBEQAccess().getDestAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BLT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLT__Group__0__Impl
	rule__BLT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BLT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLTAccess().getBltKeyword_0()); }
	'blt'
	{ after(grammarAccess.getBLTAccess().getBltKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLT__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BLT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLTAccess().getDestAssignment_1()); }
	(rule__BLT__DestAssignment_1)
	{ after(grammarAccess.getBLTAccess().getDestAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BRANCH__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BRANCH__Group__0__Impl
	rule__BRANCH__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BRANCH__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBRANCHAccess().getBKeyword_0()); }
	'b'
	{ after(grammarAccess.getBRANCHAccess().getBKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BRANCH__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BRANCH__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BRANCH__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBRANCHAccess().getDestAssignment_1()); }
	(rule__BRANCH__DestAssignment_1)
	{ after(grammarAccess.getBRANCHAccess().getDestAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BLINK__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLINK__Group__0__Impl
	rule__BLINK__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLINKAccess().getBlKeyword_0()); }
	'bl'
	{ after(grammarAccess.getBLINKAccess().getBlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLINK__Group__1__Impl
	rule__BLINK__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLINKAccess().getRegAssignment_1()); }
	(rule__BLINK__RegAssignment_1)
	{ after(grammarAccess.getBLINKAccess().getRegAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLINK__Group__2__Impl
	rule__BLINK__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLINKAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getBLINKAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BLINK__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBLINKAccess().getDestAssignment_3()); }
	(rule__BLINK__DestAssignment_3)
	{ after(grammarAccess.getBLINKAccess().getDestAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__LinesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getLinesLineParserRuleCall_0()); }
		ruleLine
		{ after(grammarAccess.getProgramAccess().getLinesLineParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__LabelDefAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getLabelDefLabelDefParserRuleCall_1_1_0()); }
		ruleLabelDef
		{ after(grammarAccess.getLineAccess().getLabelDefLabelDefParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__InstAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getInstInstructionParserRuleCall_1_2_0()); }
		ruleInstruction
		{ after(grammarAccess.getLineAccess().getInstInstructionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Line__CommentAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLineAccess().getCommentSL_COMMENTTerminalRuleCall_1_3_1_0()); }
		RULE_SL_COMMENT
		{ after(grammarAccess.getLineAccess().getCommentSL_COMMENTTerminalRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncludeAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIncludeAccess().getFileNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LabelDef__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelDefAccess().getLabelLabelParserRuleCall_1_0()); }
		ruleLabel
		{ after(grammarAccess.getLabelDefAccess().getLabelLabelParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RMW__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRMWAccess().getSizeConstParserRuleCall_1_0()); }
		ruleConst
		{ after(grammarAccess.getRMWAccess().getSizeConstParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SMW__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSMWAccess().getValueConstParserRuleCall_1_0()); }
		ruleConst
		{ after(grammarAccess.getSMWAccess().getValueConstParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SMS__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSMSAccess().getValueSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSMSAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PUSH__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPUSHAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getPUSHAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__POP__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPOPAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getPOPAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLOADAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getLOADAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LOAD__AddressAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLOADAccess().getAddressAddressParserRuleCall_3_0()); }
		ruleAddress
		{ after(grammarAccess.getLOADAccess().getAddressAddressParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR0Keyword_0_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR0Keyword_0_0()); }
			'r0'
			{ after(grammarAccess.getRegisterAccess().getNameR0Keyword_0_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR0Keyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR1Keyword_1_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR1Keyword_1_0()); }
			'r1'
			{ after(grammarAccess.getRegisterAccess().getNameR1Keyword_1_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR1Keyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR2Keyword_2_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR2Keyword_2_0()); }
			'r2'
			{ after(grammarAccess.getRegisterAccess().getNameR2Keyword_2_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR2Keyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR3Keyword_3_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR3Keyword_3_0()); }
			'r3'
			{ after(grammarAccess.getRegisterAccess().getNameR3Keyword_3_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR3Keyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR4Keyword_4_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR4Keyword_4_0()); }
			'r4'
			{ after(grammarAccess.getRegisterAccess().getNameR4Keyword_4_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR4Keyword_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR5Keyword_5_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR5Keyword_5_0()); }
			'r5'
			{ after(grammarAccess.getRegisterAccess().getNameR5Keyword_5_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR5Keyword_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR6Keyword_6_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR6Keyword_6_0()); }
			'r6'
			{ after(grammarAccess.getRegisterAccess().getNameR6Keyword_6_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR6Keyword_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameSpKeyword_7_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameSpKeyword_7_0()); }
			'sp'
			{ after(grammarAccess.getRegisterAccess().getNameSpKeyword_7_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameSpKeyword_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameR7Keyword_8_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameR7Keyword_8_0()); }
			'r7'
			{ after(grammarAccess.getRegisterAccess().getNameR7Keyword_8_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameR7Keyword_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameLrKeyword_9_0()); }
		(
			{ before(grammarAccess.getRegisterAccess().getNameLrKeyword_9_0()); }
			'lr'
			{ after(grammarAccess.getRegisterAccess().getNameLrKeyword_9_0()); }
		)
		{ after(grammarAccess.getRegisterAccess().getNameLrKeyword_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Immediate__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImmediateAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getImmediateAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__LabelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getLabelLabelCrossReference_2_0()); }
		(
			{ before(grammarAccess.getValueAccess().getLabelLabelIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getValueAccess().getLabelLabelIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getValueAccess().getLabelLabelCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getNumINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getConstAccess().getNumINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HexConst__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHexConstAccess().getNumHEXINTTerminalRuleCall_0()); }
		RULE_HEXINT
		{ after(grammarAccess.getHexConstAccess().getNumHEXINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Direct__AddressAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectAccess().getAddressValueParserRuleCall_0()); }
		ruleValue
		{ after(grammarAccess.getDirectAccess().getAddressValueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectReg__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectRegAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getDirectRegAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOREAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getSTOREAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__STORE__AddressAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSTOREAccess().getAddressAddressParserRuleCall_3_0()); }
		ruleAddress
		{ after(grammarAccess.getSTOREAccess().getAddressAddressParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__DstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMOVEAccess().getDstRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getMOVEAccess().getDstRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MOVE__SrcAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMOVEAccess().getSrcMoveValueParserRuleCall_3_0()); }
		ruleMoveValue
		{ after(grammarAccess.getMOVEAccess().getSrcMoveValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__DstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getADDAccess().getDstRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getADDAccess().getDstRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Src1Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getADDAccess().getSrc1RegisterParserRuleCall_3_0()); }
		ruleRegister
		{ after(grammarAccess.getADDAccess().getSrc1RegisterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ADD__Src2Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getADDAccess().getSrc2MoveValueParserRuleCall_5_0()); }
		ruleMoveValue
		{ after(grammarAccess.getADDAccess().getSrc2MoveValueParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__DstAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSUBAccess().getDstRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getSUBAccess().getDstRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Src1Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSUBAccess().getSrc1RegisterParserRuleCall_3_0()); }
		ruleRegister
		{ after(grammarAccess.getSUBAccess().getSrc1RegisterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SUB__Src2Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSUBAccess().getSrc2MoveValueParserRuleCall_5_0()); }
		ruleMoveValue
		{ after(grammarAccess.getSUBAccess().getSrc2MoveValueParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Src1Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCMPAccess().getSrc1RegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getCMPAccess().getSrc1RegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CMP__Src2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCMPAccess().getSrc2MoveValueParserRuleCall_3_0()); }
		ruleMoveValue
		{ after(grammarAccess.getCMPAccess().getSrc2MoveValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BEQ__DestAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBEQAccess().getDestBranchAddressParserRuleCall_1_0()); }
		ruleBranchAddress
		{ after(grammarAccess.getBEQAccess().getDestBranchAddressParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLT__DestAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBLTAccess().getDestBranchAddressParserRuleCall_1_0()); }
		ruleBranchAddress
		{ after(grammarAccess.getBLTAccess().getDestBranchAddressParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BRANCH__DestAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBRANCHAccess().getDestBranchAddressParserRuleCall_1_0()); }
		ruleBranchAddress
		{ after(grammarAccess.getBRANCHAccess().getDestBranchAddressParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__RegAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBLINKAccess().getRegRegisterParserRuleCall_1_0()); }
		ruleRegister
		{ after(grammarAccess.getBLINKAccess().getRegRegisterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BLINK__DestAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBLINKAccess().getDestBranchAddressParserRuleCall_3_0()); }
		ruleBranchAddress
		{ after(grammarAccess.getBLINKAccess().getDestBranchAddressParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('-'|'+')? ('0'..'9')+;

RULE_HEXINT : ('-'|'+')? '0x' ('0'..'9'|'A'..'F')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '%' ( options {greedy=false;} : . )*RULE_NL;

RULE_WS : (' '|'\t')+;

RULE_NL : ('\r'|'\n')+;

RULE_ANY_OTHER : .;
