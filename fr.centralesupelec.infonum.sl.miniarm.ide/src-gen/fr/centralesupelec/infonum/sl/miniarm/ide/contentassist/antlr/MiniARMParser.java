/*
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.centralesupelec.infonum.sl.miniarm.ide.contentassist.antlr.internal.InternalMiniARMParser;
import fr.centralesupelec.infonum.sl.miniarm.services.MiniARMGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MiniARMParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MiniARMGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MiniARMGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLineAccess().getAlternatives(), "rule__Line__Alternatives");
			builder.put(grammarAccess.getLineAccess().getAlternatives_1_3(), "rule__Line__Alternatives_1_3");
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getAssemblyInstAccess().getAlternatives(), "rule__AssemblyInst__Alternatives");
			builder.put(grammarAccess.getPseudoInstAccess().getAlternatives(), "rule__PseudoInst__Alternatives");
			builder.put(grammarAccess.getRealInstAccess().getAlternatives(), "rule__RealInst__Alternatives");
			builder.put(grammarAccess.getRegisterAccess().getAlternatives(), "rule__Register__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getAddressAccess().getAlternatives(), "rule__Address__Alternatives");
			builder.put(grammarAccess.getMoveValueAccess().getAlternatives(), "rule__MoveValue__Alternatives");
			builder.put(grammarAccess.getBranchAddressAccess().getAlternatives(), "rule__BranchAddress__Alternatives");
			builder.put(grammarAccess.getLineAccess().getGroup_1(), "rule__Line__Group_1__0");
			builder.put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
			builder.put(grammarAccess.getLabelDefAccess().getGroup(), "rule__LabelDef__Group__0");
			builder.put(grammarAccess.getRMWAccess().getGroup(), "rule__RMW__Group__0");
			builder.put(grammarAccess.getSMWAccess().getGroup(), "rule__SMW__Group__0");
			builder.put(grammarAccess.getSMSAccess().getGroup(), "rule__SMS__Group__0");
			builder.put(grammarAccess.getPUSHAccess().getGroup(), "rule__PUSH__Group__0");
			builder.put(grammarAccess.getPOPAccess().getGroup(), "rule__POP__Group__0");
			builder.put(grammarAccess.getLOADAccess().getGroup(), "rule__LOAD__Group__0");
			builder.put(grammarAccess.getImmediateAccess().getGroup(), "rule__Immediate__Group__0");
			builder.put(grammarAccess.getDirectRegAccess().getGroup(), "rule__DirectReg__Group__0");
			builder.put(grammarAccess.getSTOREAccess().getGroup(), "rule__STORE__Group__0");
			builder.put(grammarAccess.getMOVEAccess().getGroup(), "rule__MOVE__Group__0");
			builder.put(grammarAccess.getADDAccess().getGroup(), "rule__ADD__Group__0");
			builder.put(grammarAccess.getSUBAccess().getGroup(), "rule__SUB__Group__0");
			builder.put(grammarAccess.getCMPAccess().getGroup(), "rule__CMP__Group__0");
			builder.put(grammarAccess.getBEQAccess().getGroup(), "rule__BEQ__Group__0");
			builder.put(grammarAccess.getBLTAccess().getGroup(), "rule__BLT__Group__0");
			builder.put(grammarAccess.getBRANCHAccess().getGroup(), "rule__BRANCH__Group__0");
			builder.put(grammarAccess.getBLINKAccess().getGroup(), "rule__BLINK__Group__0");
			builder.put(grammarAccess.getProgramAccess().getLinesAssignment(), "rule__Program__LinesAssignment");
			builder.put(grammarAccess.getLineAccess().getLabelDefAssignment_1_1(), "rule__Line__LabelDefAssignment_1_1");
			builder.put(grammarAccess.getLineAccess().getInstAssignment_1_2(), "rule__Line__InstAssignment_1_2");
			builder.put(grammarAccess.getLineAccess().getCommentAssignment_1_3_1(), "rule__Line__CommentAssignment_1_3_1");
			builder.put(grammarAccess.getIncludeAccess().getFileNameAssignment_1(), "rule__Include__FileNameAssignment_1");
			builder.put(grammarAccess.getLabelDefAccess().getLabelAssignment_1(), "rule__LabelDef__LabelAssignment_1");
			builder.put(grammarAccess.getLabelAccess().getNameAssignment(), "rule__Label__NameAssignment");
			builder.put(grammarAccess.getRMWAccess().getSizeAssignment_1(), "rule__RMW__SizeAssignment_1");
			builder.put(grammarAccess.getSMWAccess().getValueAssignment_1(), "rule__SMW__ValueAssignment_1");
			builder.put(grammarAccess.getSMSAccess().getValueAssignment_1(), "rule__SMS__ValueAssignment_1");
			builder.put(grammarAccess.getPUSHAccess().getRegAssignment_1(), "rule__PUSH__RegAssignment_1");
			builder.put(grammarAccess.getPOPAccess().getRegAssignment_1(), "rule__POP__RegAssignment_1");
			builder.put(grammarAccess.getLOADAccess().getRegAssignment_1(), "rule__LOAD__RegAssignment_1");
			builder.put(grammarAccess.getLOADAccess().getAddressAssignment_3(), "rule__LOAD__AddressAssignment_3");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_0(), "rule__Register__NameAssignment_0");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_1(), "rule__Register__NameAssignment_1");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_2(), "rule__Register__NameAssignment_2");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_3(), "rule__Register__NameAssignment_3");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_4(), "rule__Register__NameAssignment_4");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_5(), "rule__Register__NameAssignment_5");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_6(), "rule__Register__NameAssignment_6");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_7(), "rule__Register__NameAssignment_7");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_8(), "rule__Register__NameAssignment_8");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_9(), "rule__Register__NameAssignment_9");
			builder.put(grammarAccess.getImmediateAccess().getValueAssignment_1(), "rule__Immediate__ValueAssignment_1");
			builder.put(grammarAccess.getValueAccess().getLabelAssignment_2(), "rule__Value__LabelAssignment_2");
			builder.put(grammarAccess.getConstAccess().getNumAssignment(), "rule__Const__NumAssignment");
			builder.put(grammarAccess.getHexConstAccess().getNumAssignment(), "rule__HexConst__NumAssignment");
			builder.put(grammarAccess.getDirectAccess().getAddressAssignment(), "rule__Direct__AddressAssignment");
			builder.put(grammarAccess.getDirectRegAccess().getRegAssignment_1(), "rule__DirectReg__RegAssignment_1");
			builder.put(grammarAccess.getSTOREAccess().getRegAssignment_1(), "rule__STORE__RegAssignment_1");
			builder.put(grammarAccess.getSTOREAccess().getAddressAssignment_3(), "rule__STORE__AddressAssignment_3");
			builder.put(grammarAccess.getMOVEAccess().getDstAssignment_1(), "rule__MOVE__DstAssignment_1");
			builder.put(grammarAccess.getMOVEAccess().getSrcAssignment_3(), "rule__MOVE__SrcAssignment_3");
			builder.put(grammarAccess.getADDAccess().getDstAssignment_1(), "rule__ADD__DstAssignment_1");
			builder.put(grammarAccess.getADDAccess().getSrc1Assignment_3(), "rule__ADD__Src1Assignment_3");
			builder.put(grammarAccess.getADDAccess().getSrc2Assignment_5(), "rule__ADD__Src2Assignment_5");
			builder.put(grammarAccess.getSUBAccess().getDstAssignment_1(), "rule__SUB__DstAssignment_1");
			builder.put(grammarAccess.getSUBAccess().getSrc1Assignment_3(), "rule__SUB__Src1Assignment_3");
			builder.put(grammarAccess.getSUBAccess().getSrc2Assignment_5(), "rule__SUB__Src2Assignment_5");
			builder.put(grammarAccess.getCMPAccess().getSrc1Assignment_1(), "rule__CMP__Src1Assignment_1");
			builder.put(grammarAccess.getCMPAccess().getSrc2Assignment_3(), "rule__CMP__Src2Assignment_3");
			builder.put(grammarAccess.getBEQAccess().getDestAssignment_1(), "rule__BEQ__DestAssignment_1");
			builder.put(grammarAccess.getBLTAccess().getDestAssignment_1(), "rule__BLT__DestAssignment_1");
			builder.put(grammarAccess.getBRANCHAccess().getDestAssignment_1(), "rule__BRANCH__DestAssignment_1");
			builder.put(grammarAccess.getBLINKAccess().getRegAssignment_1(), "rule__BLINK__RegAssignment_1");
			builder.put(grammarAccess.getBLINKAccess().getDestAssignment_3(), "rule__BLINK__DestAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MiniARMGrammarAccess grammarAccess;

	@Override
	protected InternalMiniARMParser createParser() {
		InternalMiniARMParser result = new InternalMiniARMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}

	public MiniARMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniARMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
