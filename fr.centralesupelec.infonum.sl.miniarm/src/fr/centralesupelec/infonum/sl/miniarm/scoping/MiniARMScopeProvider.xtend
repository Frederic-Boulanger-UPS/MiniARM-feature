/*
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.scoping;

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import fr.centralesupelec.infonum.sl.miniarm.miniARM.MiniARMPackage
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.EcoreUtil2
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Program
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.util.SimpleAttributeResolver
import java.util.LinkedList
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Label
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Include
import fr.centralesupelec.infonum.sl.miniarm.validation.MiniARMValidator
import java.util.List

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MiniARMScopeProvider extends AbstractMiniARMScopeProvider {
	extension MiniARMValidator validator = new MiniARMValidator
	
	// We have references only in the label attribute of Values
	override getScope(EObject context, EReference reference) {
		if (reference == MiniARMPackage.Literals.VALUE__LABEL) {
			return getLabelScope(context)
		}
		super.getScope(context, reference)
	}
	
	// Build a list of declared labels in the program and the included programs
	def List<Label> getLabelDeclarationsInProg(Program prog) {
		var LinkedList<Label> labelDecls = new LinkedList
		if (prog !== null) {
			// Build list of label decls in that program
			for (line : prog.lines) {
				if (line.labelDef !== null) {
					labelDecls.add(line.labelDef.label)
				}
				if (line instanceof Include) {
					// Get the labels declared in the included file
					var rez = (line as Include).checkIncludeFileExists
					if (rez.contents.size > 0) {
						labelDecls.addAll(getLabelDeclarationsInProg(rez.contents.get(0) as Program))
					}
				}
			}
		}
		return labelDecls
	}
	
	def IScope getLabelScope(EObject context) {
		if (context === null) {
			return IScope.NULLSCOPE
		}
		// get the block we are inside
		var prog = EcoreUtil2.getContainerOfType(context, Program);
		return Scopes.scopeFor(
			// labels declared in that program
			getLabelDeclarationsInProg(prog),
			// use name attribute
			QualifiedName.wrapper(SimpleAttributeResolver.NAME_RESOLVER),
			// the variable from outer blocks
			getLabelScope(prog.eContainer)
		)
	}
}
