/**
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.scoping;

import com.google.common.base.Objects;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Include;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Label;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.LabelDef;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Line;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.MiniARMPackage;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Program;
import fr.centralesupelec.infonum.sl.miniarm.validation.MiniARMValidator;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.util.SimpleAttributeResolver;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MiniARMScopeProvider extends AbstractMiniARMScopeProvider {
  @Extension
  private MiniARMValidator validator = new MiniARMValidator();

  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      boolean _equals = Objects.equal(reference, MiniARMPackage.Literals.VALUE__LABEL);
      if (_equals) {
        return this.getLabelScope(context);
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }

  public List<Label> getLabelDeclarationsInProg(final Program prog) {
    LinkedList<Label> labelDecls = new LinkedList<Label>();
    if ((prog != null)) {
      EList<Line> _lines = prog.getLines();
      for (final Line line : _lines) {
        {
          LabelDef _labelDef = line.getLabelDef();
          boolean _tripleNotEquals = (_labelDef != null);
          if (_tripleNotEquals) {
            labelDecls.add(line.getLabelDef().getLabel());
          }
          if ((line instanceof Include)) {
            Resource rez = this.validator.checkIncludeFileExists(((Include) line));
            if (((rez != null) && (rez.getContents().size() > 0))) {
              EObject _get = rez.getContents().get(0);
              labelDecls.addAll(this.getLabelDeclarationsInProg(((Program) _get)));
            }
          }
        }
      }
    }
    return labelDecls;
  }

  public IScope getLabelScope(final EObject context) {
    if ((context == null)) {
      return IScope.NULLSCOPE;
    }
    Program prog = EcoreUtil2.<Program>getContainerOfType(context, Program.class);
    return Scopes.<EObject>scopeFor(
      this.getLabelDeclarationsInProg(prog), 
      QualifiedName.<EObject>wrapper(SimpleAttributeResolver.NAME_RESOLVER), 
      this.getLabelScope(prog.eContainer()));
  }
}
