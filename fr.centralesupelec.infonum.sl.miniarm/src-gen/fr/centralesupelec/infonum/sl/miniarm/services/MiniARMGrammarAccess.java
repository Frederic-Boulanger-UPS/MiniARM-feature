/*
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniARMGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Program");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_0 = (RuleCall)cLinesAssignment.eContents().get(0);
		
		///*
		// * fr.centralesupelec.infonum.sl.miniarm.ui.MiniARMUiModule.java is modified to install
		// * a custom FoldingRegionProvider to avoid spurious folding region indicators in the editor:
		// *
		// * class MyFoldingRegionProvider extends DefaultFoldingRegionProvider {
		// *     @Override
		// *     protected Collection<FoldedPosition> doGetFoldingRegions(IXtextDocument xtextDocument, XtextResource xtextResource) {
		// *        return Collections.emptyList();
		// *     }
		// * }
		// *
		// * public class MiniARMUiModule extends AbstractMiniARMUiModule {
		// *     public MiniARMUiModule(AbstractUIPlugin plugin) {
		// *        super(plugin);
		// *     }
		// *
		// *     public Class<? extends IFoldingRegionProvider> bindIFoldingRegionProvider() {
		// *        return MyFoldingRegionProvider.class;
		// *     }
		// * }
		// */
		//Program:
		//    lines+=Line*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//lines+=Line*
		public Assignment getLinesAssignment() { return cLinesAssignment; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_0() { return cLinesLineParserRuleCall_0; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Line");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLineAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLabelDefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelDefLabelDefParserRuleCall_1_1_0 = (RuleCall)cLabelDefAssignment_1_1.eContents().get(0);
		private final Assignment cInstAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInstInstructionParserRuleCall_1_2_0 = (RuleCall)cInstAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_1_3_0 = (RuleCall)cAlternatives_1_3.eContents().get(0);
		private final Assignment cCommentAssignment_1_3_1 = (Assignment)cAlternatives_1_3.eContents().get(1);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_3_1_0 = (RuleCall)cCommentAssignment_1_3_1.eContents().get(0);
		
		//Line:
		//    Include
		//|    {Line} (labelDef=LabelDef)? (inst=Instruction)? (NL | comment=SL_COMMENT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    Include
		//|    {Line} (labelDef=LabelDef)? (inst=Instruction)? (NL | comment=SL_COMMENT)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }
		
		//{Line} (labelDef=LabelDef)? (inst=Instruction)? (NL | comment=SL_COMMENT)
		public Group getGroup_1() { return cGroup_1; }
		
		//{Line}
		public Action getLineAction_1_0() { return cLineAction_1_0; }
		
		//(labelDef=LabelDef)?
		public Assignment getLabelDefAssignment_1_1() { return cLabelDefAssignment_1_1; }
		
		//LabelDef
		public RuleCall getLabelDefLabelDefParserRuleCall_1_1_0() { return cLabelDefLabelDefParserRuleCall_1_1_0; }
		
		//(inst=Instruction)?
		public Assignment getInstAssignment_1_2() { return cInstAssignment_1_2; }
		
		//Instruction
		public RuleCall getInstInstructionParserRuleCall_1_2_0() { return cInstInstructionParserRuleCall_1_2_0; }
		
		//(NL | comment=SL_COMMENT)
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_1_3_0() { return cNLTerminalRuleCall_1_3_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_1_3_1() { return cCommentAssignment_1_3_1; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_3_1_0() { return cCommentSL_COMMENTTerminalRuleCall_1_3_1_0; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Include:
		//    'include' fileName=STRING NL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' fileName=STRING NL
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//fileName=STRING
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }
		
		//STRING
		public RuleCall getFileNameSTRINGTerminalRuleCall_1_0() { return cFileNameSTRINGTerminalRuleCall_1_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}
	public class LabelDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.LabelDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//LabelDef:
		//    '@' label=Label
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' label=Label
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//label=Label
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_1_0() { return cLabelLabelParserRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssemblyInstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPseudoInstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRealInstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Instruction:
		//    AssemblyInst | PseudoInst | RealInst
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AssemblyInst | PseudoInst | RealInst
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AssemblyInst
		public RuleCall getAssemblyInstParserRuleCall_0() { return cAssemblyInstParserRuleCall_0; }
		
		//PseudoInst
		public RuleCall getPseudoInstParserRuleCall_1() { return cPseudoInstParserRuleCall_1; }
		
		//RealInst
		public RuleCall getRealInstParserRuleCall_2() { return cRealInstParserRuleCall_2; }
	}
	public class AssemblyInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.AssemblyInst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRMWParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSMWParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSMSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AssemblyInst:
		//    RMW | SMW | SMS
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RMW | SMW | SMS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RMW
		public RuleCall getRMWParserRuleCall_0() { return cRMWParserRuleCall_0; }
		
		//SMW
		public RuleCall getSMWParserRuleCall_1() { return cSMWParserRuleCall_1; }
		
		//SMS
		public RuleCall getSMSParserRuleCall_2() { return cSMSParserRuleCall_2; }
	}
	public class PseudoInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.PseudoInst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPUSHParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPOPParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PseudoInst:
		//    PUSH | POP
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PUSH | POP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUSH
		public RuleCall getPUSHParserRuleCall_0() { return cPUSHParserRuleCall_0; }
		
		//POP
		public RuleCall getPOPParserRuleCall_1() { return cPOPParserRuleCall_1; }
	}
	public class RealInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.RealInst");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLOADParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTOREParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMOVEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cADDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSUBParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCMPParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBEQParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBLTParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBRANCHParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBLINKParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//RealInst:
		//    LOAD | STORE | MOVE | ADD | SUB | CMP | BEQ | BLT | BRANCH | BLINK
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LOAD | STORE | MOVE | ADD | SUB | CMP | BEQ | BLT | BRANCH | BLINK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOAD
		public RuleCall getLOADParserRuleCall_0() { return cLOADParserRuleCall_0; }
		
		//STORE
		public RuleCall getSTOREParserRuleCall_1() { return cSTOREParserRuleCall_1; }
		
		//MOVE
		public RuleCall getMOVEParserRuleCall_2() { return cMOVEParserRuleCall_2; }
		
		//ADD
		public RuleCall getADDParserRuleCall_3() { return cADDParserRuleCall_3; }
		
		//SUB
		public RuleCall getSUBParserRuleCall_4() { return cSUBParserRuleCall_4; }
		
		//CMP
		public RuleCall getCMPParserRuleCall_5() { return cCMPParserRuleCall_5; }
		
		//BEQ
		public RuleCall getBEQParserRuleCall_6() { return cBEQParserRuleCall_6; }
		
		//BLT
		public RuleCall getBLTParserRuleCall_7() { return cBLTParserRuleCall_7; }
		
		//BRANCH
		public RuleCall getBRANCHParserRuleCall_8() { return cBRANCHParserRuleCall_8; }
		
		//BLINK
		public RuleCall getBLINKParserRuleCall_9() { return cBLINKParserRuleCall_9; }
	}
	public class RMWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.RMW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRmwKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeConstParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		
		//RMW:
		//    'rmw' size=Const
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rmw' size=Const
		public Group getGroup() { return cGroup; }
		
		//'rmw'
		public Keyword getRmwKeyword_0() { return cRmwKeyword_0; }
		
		//size=Const
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//Const
		public RuleCall getSizeConstParserRuleCall_1_0() { return cSizeConstParserRuleCall_1_0; }
	}
	public class SMWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.SMW");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmwKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueConstParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SMW:
		//    'smw' value=Const
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'smw' value=Const
		public Group getGroup() { return cGroup; }
		
		//'smw'
		public Keyword getSmwKeyword_0() { return cSmwKeyword_0; }
		
		//value=Const
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Const
		public RuleCall getValueConstParserRuleCall_1_0() { return cValueConstParserRuleCall_1_0; }
	}
	public class SMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.SMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmwKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SMS:
		//    'smw' value=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'smw' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'smw'
		public Keyword getSmwKeyword_0() { return cSmwKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class PUSHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.PUSH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPushKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		
		//PUSH:
		//    'push' reg=Register
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'push' reg=Register
		public Group getGroup() { return cGroup; }
		
		//'push'
		public Keyword getPushKeyword_0() { return cPushKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
	}
	public class POPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.POP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		
		//POP:
		//    'pop' reg=Register
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pop' reg=Register
		public Group getGroup() { return cGroup; }
		
		//'pop'
		public Keyword getPopKeyword_0() { return cPopKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
	}
	public class LOADElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.LOAD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLdrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddressAddressParserRuleCall_3_0 = (RuleCall)cAddressAssignment_3.eContents().get(0);
		
		//LOAD:
		//    'ldr' reg=Register ',' address=Address
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ldr' reg=Register ',' address=Address
		public Group getGroup() { return cGroup; }
		
		//'ldr'
		public Keyword getLdrKeyword_0() { return cLdrKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//address=Address
		public Assignment getAddressAssignment_3() { return cAddressAssignment_3; }
		
		//Address
		public RuleCall getAddressAddressParserRuleCall_3_0() { return cAddressAddressParserRuleCall_3_0; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Register");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameR0Keyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameR1Keyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameR2Keyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNameR3Keyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNameR4Keyword_4_0 = (Keyword)cNameAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNameR5Keyword_5_0 = (Keyword)cNameAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cNameR6Keyword_6_0 = (Keyword)cNameAssignment_6.eContents().get(0);
		private final Assignment cNameAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cNameSpKeyword_7_0 = (Keyword)cNameAssignment_7.eContents().get(0);
		private final Assignment cNameAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cNameR7Keyword_8_0 = (Keyword)cNameAssignment_8.eContents().get(0);
		private final Assignment cNameAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cNameLrKeyword_9_0 = (Keyword)cNameAssignment_9.eContents().get(0);
		
		//Register:
		//    name='r0' | name='r1' | name='r2' | name='r3' | name='r4' | name='r5' | name='r6' | name='sp' | name='r7' | name='lr'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='r0' | name='r1' | name='r2' | name='r3' | name='r4' | name='r5' | name='r6' | name='sp' | name='r7' | name='lr'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name='r0'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'r0'
		public Keyword getNameR0Keyword_0_0() { return cNameR0Keyword_0_0; }
		
		//name='r1'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'r1'
		public Keyword getNameR1Keyword_1_0() { return cNameR1Keyword_1_0; }
		
		//name='r2'
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//'r2'
		public Keyword getNameR2Keyword_2_0() { return cNameR2Keyword_2_0; }
		
		//name='r3'
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//'r3'
		public Keyword getNameR3Keyword_3_0() { return cNameR3Keyword_3_0; }
		
		//name='r4'
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//'r4'
		public Keyword getNameR4Keyword_4_0() { return cNameR4Keyword_4_0; }
		
		//name='r5'
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//'r5'
		public Keyword getNameR5Keyword_5_0() { return cNameR5Keyword_5_0; }
		
		//name='r6'
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//'r6'
		public Keyword getNameR6Keyword_6_0() { return cNameR6Keyword_6_0; }
		
		//name='sp'
		public Assignment getNameAssignment_7() { return cNameAssignment_7; }
		
		//'sp'
		public Keyword getNameSpKeyword_7_0() { return cNameSpKeyword_7_0; }
		
		//name='r7'
		public Assignment getNameAssignment_8() { return cNameAssignment_8; }
		
		//'r7'
		public Keyword getNameR7Keyword_8_0() { return cNameR7Keyword_8_0; }
		
		//name='lr'
		public Assignment getNameAssignment_9() { return cNameAssignment_9; }
		
		//'lr'
		public Keyword getNameLrKeyword_9_0() { return cNameLrKeyword_9_0; }
	}
	public class ImmediateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Immediate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Immediate:
		//    '#' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' value=Value
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHexConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cLabelAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cLabelLabelCrossReference_2_0 = (CrossReference)cLabelAssignment_2.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_2_0_1 = (RuleCall)cLabelLabelCrossReference_2_0.eContents().get(1);
		
		//Value:
		//    Const | HexConst | label=[Label]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Const | HexConst | label=[Label]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }
		
		//HexConst
		public RuleCall getHexConstParserRuleCall_1() { return cHexConstParserRuleCall_1; }
		
		//label=[Label]
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }
		
		//[Label]
		public CrossReference getLabelLabelCrossReference_2_0() { return cLabelLabelCrossReference_2_0; }
		
		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_2_0_1() { return cLabelLabelIDTerminalRuleCall_2_0_1; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Const");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//Const:
		//    num=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=INT
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_0() { return cNumINTTerminalRuleCall_0; }
	}
	public class HexConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.HexConst");
		private final Assignment cNumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumHEXINTTerminalRuleCall_0 = (RuleCall)cNumAssignment.eContents().get(0);
		
		//HexConst:
		//    num=HEXINT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//num=HEXINT
		public Assignment getNumAssignment() { return cNumAssignment; }
		
		//HEXINT
		public RuleCall getNumHEXINTTerminalRuleCall_0() { return cNumHEXINTTerminalRuleCall_0; }
	}
	public class DirectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Direct");
		private final Assignment cAddressAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAddressValueParserRuleCall_0 = (RuleCall)cAddressAssignment.eContents().get(0);
		
		//Direct:
		//    address=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//address=Value
		public Assignment getAddressAssignment() { return cAddressAssignment; }
		
		//Value
		public RuleCall getAddressValueParserRuleCall_0() { return cAddressValueParserRuleCall_0; }
	}
	public class DirectRegElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.DirectReg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DirectReg:
		//    '[' reg=Register ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' reg=Register ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class STOREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.STORE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAddressAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddressAddressParserRuleCall_3_0 = (RuleCall)cAddressAssignment_3.eContents().get(0);
		
		//STORE:
		//    'str' reg=Register ',' address=Address
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'str' reg=Register ',' address=Address
		public Group getGroup() { return cGroup; }
		
		//'str'
		public Keyword getStrKeyword_0() { return cStrKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//address=Address
		public Assignment getAddressAssignment_3() { return cAddressAssignment_3; }
		
		//Address
		public RuleCall getAddressAddressParserRuleCall_3_0() { return cAddressAddressParserRuleCall_3_0; }
	}
	public class AddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.Address");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectRegParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Address:
		//    Direct | DirectReg
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Direct | DirectReg
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Direct
		public RuleCall getDirectParserRuleCall_0() { return cDirectParserRuleCall_0; }
		
		//DirectReg
		public RuleCall getDirectRegParserRuleCall_1() { return cDirectRegParserRuleCall_1; }
	}
	public class MOVEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.MOVE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMovKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDstRegisterParserRuleCall_1_0 = (RuleCall)cDstAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrcMoveValueParserRuleCall_3_0 = (RuleCall)cSrcAssignment_3.eContents().get(0);
		
		//MOVE:
		//    'mov' dst=Register ',' src=MoveValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'mov' dst=Register ',' src=MoveValue
		public Group getGroup() { return cGroup; }
		
		//'mov'
		public Keyword getMovKeyword_0() { return cMovKeyword_0; }
		
		//dst=Register
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }
		
		//Register
		public RuleCall getDstRegisterParserRuleCall_1_0() { return cDstRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//src=MoveValue
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }
		
		//MoveValue
		public RuleCall getSrcMoveValueParserRuleCall_3_0() { return cSrcMoveValueParserRuleCall_3_0; }
	}
	public class MoveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.MoveValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImmediateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegisterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MoveValue:
		//    Immediate | Register
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Immediate | Register
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Immediate
		public RuleCall getImmediateParserRuleCall_0() { return cImmediateParserRuleCall_0; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_1() { return cRegisterParserRuleCall_1; }
	}
	public class ADDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.ADD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDstRegisterParserRuleCall_1_0 = (RuleCall)cDstAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrc1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrc1RegisterParserRuleCall_3_0 = (RuleCall)cSrc1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSrc2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSrc2MoveValueParserRuleCall_5_0 = (RuleCall)cSrc2Assignment_5.eContents().get(0);
		
		//ADD:
		//    'add' dst=Register ',' src1=Register ',' src2=MoveValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' dst=Register ',' src1=Register ',' src2=MoveValue
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//dst=Register
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }
		
		//Register
		public RuleCall getDstRegisterParserRuleCall_1_0() { return cDstRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//src1=Register
		public Assignment getSrc1Assignment_3() { return cSrc1Assignment_3; }
		
		//Register
		public RuleCall getSrc1RegisterParserRuleCall_3_0() { return cSrc1RegisterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//src2=MoveValue
		public Assignment getSrc2Assignment_5() { return cSrc2Assignment_5; }
		
		//MoveValue
		public RuleCall getSrc2MoveValueParserRuleCall_5_0() { return cSrc2MoveValueParserRuleCall_5_0; }
	}
	public class SUBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.SUB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDstRegisterParserRuleCall_1_0 = (RuleCall)cDstAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrc1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrc1RegisterParserRuleCall_3_0 = (RuleCall)cSrc1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSrc2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSrc2MoveValueParserRuleCall_5_0 = (RuleCall)cSrc2Assignment_5.eContents().get(0);
		
		//SUB:
		//    'sub' dst=Register ',' src1=Register ',' src2=MoveValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'sub' dst=Register ',' src1=Register ',' src2=MoveValue
		public Group getGroup() { return cGroup; }
		
		//'sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//dst=Register
		public Assignment getDstAssignment_1() { return cDstAssignment_1; }
		
		//Register
		public RuleCall getDstRegisterParserRuleCall_1_0() { return cDstRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//src1=Register
		public Assignment getSrc1Assignment_3() { return cSrc1Assignment_3; }
		
		//Register
		public RuleCall getSrc1RegisterParserRuleCall_3_0() { return cSrc1RegisterParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//src2=MoveValue
		public Assignment getSrc2Assignment_5() { return cSrc2Assignment_5; }
		
		//MoveValue
		public RuleCall getSrc2MoveValueParserRuleCall_5_0() { return cSrc2MoveValueParserRuleCall_5_0; }
	}
	public class CMPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.CMP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCmpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSrc1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSrc1RegisterParserRuleCall_1_0 = (RuleCall)cSrc1Assignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrc2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSrc2MoveValueParserRuleCall_3_0 = (RuleCall)cSrc2Assignment_3.eContents().get(0);
		
		//CMP:
		//    'cmp' src1=Register ',' src2=MoveValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'cmp' src1=Register ',' src2=MoveValue
		public Group getGroup() { return cGroup; }
		
		//'cmp'
		public Keyword getCmpKeyword_0() { return cCmpKeyword_0; }
		
		//src1=Register
		public Assignment getSrc1Assignment_1() { return cSrc1Assignment_1; }
		
		//Register
		public RuleCall getSrc1RegisterParserRuleCall_1_0() { return cSrc1RegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//src2=MoveValue
		public Assignment getSrc2Assignment_3() { return cSrc2Assignment_3; }
		
		//MoveValue
		public RuleCall getSrc2MoveValueParserRuleCall_3_0() { return cSrc2MoveValueParserRuleCall_3_0; }
	}
	public class BEQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.BEQ");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestBranchAddressParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		
		//BEQ:
		//    'beq' dest=BranchAddress
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'beq' dest=BranchAddress
		public Group getGroup() { return cGroup; }
		
		//'beq'
		public Keyword getBeqKeyword_0() { return cBeqKeyword_0; }
		
		//dest=BranchAddress
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//BranchAddress
		public RuleCall getDestBranchAddressParserRuleCall_1_0() { return cDestBranchAddressParserRuleCall_1_0; }
	}
	public class BranchAddressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.BranchAddress");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegisterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BranchAddress:
		//    Value | Register
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Value | Register
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }
		
		//Register
		public RuleCall getRegisterParserRuleCall_1() { return cRegisterParserRuleCall_1; }
	}
	public class BLTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.BLT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestBranchAddressParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		
		//BLT:
		//    'blt' dest=BranchAddress
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'blt' dest=BranchAddress
		public Group getGroup() { return cGroup; }
		
		//'blt'
		public Keyword getBltKeyword_0() { return cBltKeyword_0; }
		
		//dest=BranchAddress
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//BranchAddress
		public RuleCall getDestBranchAddressParserRuleCall_1_0() { return cDestBranchAddressParserRuleCall_1_0; }
	}
	public class BRANCHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.BRANCH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestBranchAddressParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		
		//BRANCH:
		//    'b' dest=BranchAddress
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'b' dest=BranchAddress
		public Group getGroup() { return cGroup; }
		
		//'b'
		public Keyword getBKeyword_0() { return cBKeyword_0; }
		
		//dest=BranchAddress
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }
		
		//BranchAddress
		public RuleCall getDestBranchAddressParserRuleCall_1_0() { return cDestBranchAddressParserRuleCall_1_0; }
	}
	public class BLINKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.BLINK");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRegAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRegRegisterParserRuleCall_1_0 = (RuleCall)cRegAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDestBranchAddressParserRuleCall_3_0 = (RuleCall)cDestAssignment_3.eContents().get(0);
		
		//BLINK:
		//    'bl' reg=Register ',' dest=BranchAddress
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'bl' reg=Register ',' dest=BranchAddress
		public Group getGroup() { return cGroup; }
		
		//'bl'
		public Keyword getBlKeyword_0() { return cBlKeyword_0; }
		
		//reg=Register
		public Assignment getRegAssignment_1() { return cRegAssignment_1; }
		
		//Register
		public RuleCall getRegRegisterParserRuleCall_1_0() { return cRegRegisterParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dest=BranchAddress
		public Assignment getDestAssignment_3() { return cDestAssignment_3; }
		
		//BranchAddress
		public RuleCall getDestBranchAddressParserRuleCall_3_0() { return cDestBranchAddressParserRuleCall_3_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final LineElements pLine;
	private final IncludeElements pInclude;
	private final LabelDefElements pLabelDef;
	private final LabelElements pLabel;
	private final InstructionElements pInstruction;
	private final AssemblyInstElements pAssemblyInst;
	private final PseudoInstElements pPseudoInst;
	private final RealInstElements pRealInst;
	private final RMWElements pRMW;
	private final SMWElements pSMW;
	private final SMSElements pSMS;
	private final PUSHElements pPUSH;
	private final POPElements pPOP;
	private final LOADElements pLOAD;
	private final RegisterElements pRegister;
	private final ImmediateElements pImmediate;
	private final ValueElements pValue;
	private final ConstElements pConst;
	private final HexConstElements pHexConst;
	private final DirectElements pDirect;
	private final DirectRegElements pDirectReg;
	private final STOREElements pSTORE;
	private final AddressElements pAddress;
	private final MOVEElements pMOVE;
	private final MoveValueElements pMoveValue;
	private final ADDElements pADD;
	private final SUBElements pSUB;
	private final CMPElements pCMP;
	private final BEQElements pBEQ;
	private final BranchAddressElements pBranchAddress;
	private final BLTElements pBLT;
	private final BRANCHElements pBRANCH;
	private final BLINKElements pBLINK;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tHEXINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tNL;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MiniARMGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProgram = new ProgramElements();
		this.pLine = new LineElements();
		this.pInclude = new IncludeElements();
		this.pLabelDef = new LabelDefElements();
		this.pLabel = new LabelElements();
		this.pInstruction = new InstructionElements();
		this.pAssemblyInst = new AssemblyInstElements();
		this.pPseudoInst = new PseudoInstElements();
		this.pRealInst = new RealInstElements();
		this.pRMW = new RMWElements();
		this.pSMW = new SMWElements();
		this.pSMS = new SMSElements();
		this.pPUSH = new PUSHElements();
		this.pPOP = new POPElements();
		this.pLOAD = new LOADElements();
		this.pRegister = new RegisterElements();
		this.pImmediate = new ImmediateElements();
		this.pValue = new ValueElements();
		this.pConst = new ConstElements();
		this.pHexConst = new HexConstElements();
		this.pDirect = new DirectElements();
		this.pDirectReg = new DirectRegElements();
		this.pSTORE = new STOREElements();
		this.pAddress = new AddressElements();
		this.pMOVE = new MOVEElements();
		this.pMoveValue = new MoveValueElements();
		this.pADD = new ADDElements();
		this.pSUB = new SUBElements();
		this.pCMP = new CMPElements();
		this.pBEQ = new BEQElements();
		this.pBranchAddress = new BranchAddressElements();
		this.pBLT = new BLTElements();
		this.pBRANCH = new BRANCHElements();
		this.pBLINK = new BLINKElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.INT");
		this.tHEXINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.HEXINT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.STRING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.WS");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.NL");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.centralesupelec.infonum.sl.miniarm.MiniARM.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.centralesupelec.infonum.sl.miniarm.MiniARM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	///*
	// * fr.centralesupelec.infonum.sl.miniarm.ui.MiniARMUiModule.java is modified to install
	// * a custom FoldingRegionProvider to avoid spurious folding region indicators in the editor:
	// *
	// * class MyFoldingRegionProvider extends DefaultFoldingRegionProvider {
	// *     @Override
	// *     protected Collection<FoldedPosition> doGetFoldingRegions(IXtextDocument xtextDocument, XtextResource xtextResource) {
	// *        return Collections.emptyList();
	// *     }
	// * }
	// *
	// * public class MiniARMUiModule extends AbstractMiniARMUiModule {
	// *     public MiniARMUiModule(AbstractUIPlugin plugin) {
	// *        super(plugin);
	// *     }
	// *
	// *     public Class<? extends IFoldingRegionProvider> bindIFoldingRegionProvider() {
	// *        return MyFoldingRegionProvider.class;
	// *     }
	// * }
	// */
	//Program:
	//    lines+=Line*
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Line:
	//    Include
	//|    {Line} (labelDef=LabelDef)? (inst=Instruction)? (NL | comment=SL_COMMENT)
	//;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//Include:
	//    'include' fileName=STRING NL
	//;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//LabelDef:
	//    '@' label=Label
	//;
	public LabelDefElements getLabelDefAccess() {
		return pLabelDef;
	}
	
	public ParserRule getLabelDefRule() {
		return getLabelDefAccess().getRule();
	}
	
	//Label:
	//    name=ID
	//;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Instruction:
	//    AssemblyInst | PseudoInst | RealInst
	//;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//AssemblyInst:
	//    RMW | SMW | SMS
	//;
	public AssemblyInstElements getAssemblyInstAccess() {
		return pAssemblyInst;
	}
	
	public ParserRule getAssemblyInstRule() {
		return getAssemblyInstAccess().getRule();
	}
	
	//PseudoInst:
	//    PUSH | POP
	//;
	public PseudoInstElements getPseudoInstAccess() {
		return pPseudoInst;
	}
	
	public ParserRule getPseudoInstRule() {
		return getPseudoInstAccess().getRule();
	}
	
	//RealInst:
	//    LOAD | STORE | MOVE | ADD | SUB | CMP | BEQ | BLT | BRANCH | BLINK
	//;
	public RealInstElements getRealInstAccess() {
		return pRealInst;
	}
	
	public ParserRule getRealInstRule() {
		return getRealInstAccess().getRule();
	}
	
	//RMW:
	//    'rmw' size=Const
	//;
	public RMWElements getRMWAccess() {
		return pRMW;
	}
	
	public ParserRule getRMWRule() {
		return getRMWAccess().getRule();
	}
	
	//SMW:
	//    'smw' value=Const
	//;
	public SMWElements getSMWAccess() {
		return pSMW;
	}
	
	public ParserRule getSMWRule() {
		return getSMWAccess().getRule();
	}
	
	//SMS:
	//    'smw' value=STRING
	//;
	public SMSElements getSMSAccess() {
		return pSMS;
	}
	
	public ParserRule getSMSRule() {
		return getSMSAccess().getRule();
	}
	
	//PUSH:
	//    'push' reg=Register
	//;
	public PUSHElements getPUSHAccess() {
		return pPUSH;
	}
	
	public ParserRule getPUSHRule() {
		return getPUSHAccess().getRule();
	}
	
	//POP:
	//    'pop' reg=Register
	//;
	public POPElements getPOPAccess() {
		return pPOP;
	}
	
	public ParserRule getPOPRule() {
		return getPOPAccess().getRule();
	}
	
	//LOAD:
	//    'ldr' reg=Register ',' address=Address
	//;
	public LOADElements getLOADAccess() {
		return pLOAD;
	}
	
	public ParserRule getLOADRule() {
		return getLOADAccess().getRule();
	}
	
	//Register:
	//    name='r0' | name='r1' | name='r2' | name='r3' | name='r4' | name='r5' | name='r6' | name='sp' | name='r7' | name='lr'
	//;
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Immediate:
	//    '#' value=Value
	//;
	public ImmediateElements getImmediateAccess() {
		return pImmediate;
	}
	
	public ParserRule getImmediateRule() {
		return getImmediateAccess().getRule();
	}
	
	//Value:
	//    Const | HexConst | label=[Label]
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Const:
	//    num=INT
	//;
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//HexConst:
	//    num=HEXINT
	//;
	public HexConstElements getHexConstAccess() {
		return pHexConst;
	}
	
	public ParserRule getHexConstRule() {
		return getHexConstAccess().getRule();
	}
	
	//Direct:
	//    address=Value
	//;
	public DirectElements getDirectAccess() {
		return pDirect;
	}
	
	public ParserRule getDirectRule() {
		return getDirectAccess().getRule();
	}
	
	//DirectReg:
	//    '[' reg=Register ']'
	//;
	public DirectRegElements getDirectRegAccess() {
		return pDirectReg;
	}
	
	public ParserRule getDirectRegRule() {
		return getDirectRegAccess().getRule();
	}
	
	//STORE:
	//    'str' reg=Register ',' address=Address
	//;
	public STOREElements getSTOREAccess() {
		return pSTORE;
	}
	
	public ParserRule getSTORERule() {
		return getSTOREAccess().getRule();
	}
	
	//Address:
	//    Direct | DirectReg
	//;
	public AddressElements getAddressAccess() {
		return pAddress;
	}
	
	public ParserRule getAddressRule() {
		return getAddressAccess().getRule();
	}
	
	//MOVE:
	//    'mov' dst=Register ',' src=MoveValue
	//;
	public MOVEElements getMOVEAccess() {
		return pMOVE;
	}
	
	public ParserRule getMOVERule() {
		return getMOVEAccess().getRule();
	}
	
	//MoveValue:
	//    Immediate | Register
	//;
	public MoveValueElements getMoveValueAccess() {
		return pMoveValue;
	}
	
	public ParserRule getMoveValueRule() {
		return getMoveValueAccess().getRule();
	}
	
	//ADD:
	//    'add' dst=Register ',' src1=Register ',' src2=MoveValue
	//;
	public ADDElements getADDAccess() {
		return pADD;
	}
	
	public ParserRule getADDRule() {
		return getADDAccess().getRule();
	}
	
	//SUB:
	//    'sub' dst=Register ',' src1=Register ',' src2=MoveValue
	//;
	public SUBElements getSUBAccess() {
		return pSUB;
	}
	
	public ParserRule getSUBRule() {
		return getSUBAccess().getRule();
	}
	
	//CMP:
	//    'cmp' src1=Register ',' src2=MoveValue
	//;
	public CMPElements getCMPAccess() {
		return pCMP;
	}
	
	public ParserRule getCMPRule() {
		return getCMPAccess().getRule();
	}
	
	//BEQ:
	//    'beq' dest=BranchAddress
	//;
	public BEQElements getBEQAccess() {
		return pBEQ;
	}
	
	public ParserRule getBEQRule() {
		return getBEQAccess().getRule();
	}
	
	//BranchAddress:
	//    Value | Register
	//;
	public BranchAddressElements getBranchAddressAccess() {
		return pBranchAddress;
	}
	
	public ParserRule getBranchAddressRule() {
		return getBranchAddressAccess().getRule();
	}
	
	//BLT:
	//    'blt' dest=BranchAddress
	//;
	public BLTElements getBLTAccess() {
		return pBLT;
	}
	
	public ParserRule getBLTRule() {
		return getBLTAccess().getRule();
	}
	
	//BRANCH:
	//    'b' dest=BranchAddress
	//;
	public BRANCHElements getBRANCHAccess() {
		return pBRANCH;
	}
	
	public ParserRule getBRANCHRule() {
		return getBRANCHAccess().getRule();
	}
	
	//BLINK:
	//    'bl' reg=Register ',' dest=BranchAddress
	//;
	public BLINKElements getBLINKAccess() {
		return pBLINK;
	}
	
	public ParserRule getBLINKRule() {
		return getBLINKAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt: ('-'|'+')?('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	///*
	// * fr.centralesupelec.fr.infonum.sl.miniarm.MiniARMRuntimeModule is modified to install
	// * a custom FoldingRegionProvider to avoid spurious folding region indicators in the editor:
	// * public class MiniARMRuntimeModule extends AbstractMiniARMRuntimeModule {
	// *   @Override public Class<? extends IValueConverterService> bindIValueConverterService() {
	// *      return MyValueConverters.class;
	// *   }
	// * }
	// *
	// * with fr.centralesupelec.fr.infonum.sl.miniarm.MyValueConverters.java containing:
	// *
	// * public class MyValueConverters extends DefaultTerminalConverters {
	// *   @ValueConverter(rule = "HEXINT")
	// *   public IValueConverter<Integer> HEXINT() {
	// *       return new AbstractToStringConverter<Integer>() {
	// *           @Override
	// *           protected Integer internalToValue(String string, INode node) throws ValueConverterException {
	// *               return Integer.decode(string);
	// *           }
	// *       };
	// *   }
	// * }
	// */
	//terminal HEXINT returns ecore::EInt: ('-'|'+')?'0x'('0'..'9' | 'A'..'F')+;
	public TerminalRule getHEXINTRule() {
		return tHEXINT;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal SL_COMMENT : '%' -> NL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS         : (' '|'\t')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal NL         : ('\r'|'\n')+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
