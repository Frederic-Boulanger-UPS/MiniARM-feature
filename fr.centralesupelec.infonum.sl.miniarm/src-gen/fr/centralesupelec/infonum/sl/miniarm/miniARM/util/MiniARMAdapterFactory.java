/**
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.miniARM.util;

import fr.centralesupelec.infonum.sl.miniarm.miniARM.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.MiniARMPackage
 * @generated
 */
public class MiniARMAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MiniARMPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniARMAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MiniARMPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MiniARMSwitch<Adapter> modelSwitch =
    new MiniARMSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter caseLine(Line object)
      {
        return createLineAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseLabelDef(LabelDef object)
      {
        return createLabelDefAdapter();
      }
      @Override
      public Adapter caseLabel(Label object)
      {
        return createLabelAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseAssemblyInst(AssemblyInst object)
      {
        return createAssemblyInstAdapter();
      }
      @Override
      public Adapter casePseudoInst(PseudoInst object)
      {
        return createPseudoInstAdapter();
      }
      @Override
      public Adapter caseRealInst(RealInst object)
      {
        return createRealInstAdapter();
      }
      @Override
      public Adapter caseRMW(RMW object)
      {
        return createRMWAdapter();
      }
      @Override
      public Adapter caseSMW(SMW object)
      {
        return createSMWAdapter();
      }
      @Override
      public Adapter caseSMS(SMS object)
      {
        return createSMSAdapter();
      }
      @Override
      public Adapter casePUSH(PUSH object)
      {
        return createPUSHAdapter();
      }
      @Override
      public Adapter casePOP(POP object)
      {
        return createPOPAdapter();
      }
      @Override
      public Adapter caseLOAD(LOAD object)
      {
        return createLOADAdapter();
      }
      @Override
      public Adapter caseRegister(Register object)
      {
        return createRegisterAdapter();
      }
      @Override
      public Adapter caseImmediate(Immediate object)
      {
        return createImmediateAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseHexConst(HexConst object)
      {
        return createHexConstAdapter();
      }
      @Override
      public Adapter caseDirect(Direct object)
      {
        return createDirectAdapter();
      }
      @Override
      public Adapter caseDirectReg(DirectReg object)
      {
        return createDirectRegAdapter();
      }
      @Override
      public Adapter caseSTORE(STORE object)
      {
        return createSTOREAdapter();
      }
      @Override
      public Adapter caseAddress(Address object)
      {
        return createAddressAdapter();
      }
      @Override
      public Adapter caseMOVE(MOVE object)
      {
        return createMOVEAdapter();
      }
      @Override
      public Adapter caseMoveValue(MoveValue object)
      {
        return createMoveValueAdapter();
      }
      @Override
      public Adapter caseADD(ADD object)
      {
        return createADDAdapter();
      }
      @Override
      public Adapter caseSUB(SUB object)
      {
        return createSUBAdapter();
      }
      @Override
      public Adapter caseCMP(CMP object)
      {
        return createCMPAdapter();
      }
      @Override
      public Adapter caseBEQ(BEQ object)
      {
        return createBEQAdapter();
      }
      @Override
      public Adapter caseBranchAddress(BranchAddress object)
      {
        return createBranchAddressAdapter();
      }
      @Override
      public Adapter caseBLT(BLT object)
      {
        return createBLTAdapter();
      }
      @Override
      public Adapter caseBRANCH(BRANCH object)
      {
        return createBRANCHAdapter();
      }
      @Override
      public Adapter caseBLINK(BLINK object)
      {
        return createBLINKAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Line <em>Line</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Line
   * @generated
   */
  public Adapter createLineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.LabelDef <em>Label Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.LabelDef
   * @generated
   */
  public Adapter createLabelDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Label <em>Label</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Label
   * @generated
   */
  public Adapter createLabelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.AssemblyInst <em>Assembly Inst</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.AssemblyInst
   * @generated
   */
  public Adapter createAssemblyInstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.PseudoInst <em>Pseudo Inst</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.PseudoInst
   * @generated
   */
  public Adapter createPseudoInstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.RealInst <em>Real Inst</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.RealInst
   * @generated
   */
  public Adapter createRealInstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.RMW <em>RMW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.RMW
   * @generated
   */
  public Adapter createRMWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.SMW <em>SMW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.SMW
   * @generated
   */
  public Adapter createSMWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.SMS <em>SMS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.SMS
   * @generated
   */
  public Adapter createSMSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.PUSH <em>PUSH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.PUSH
   * @generated
   */
  public Adapter createPUSHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.POP <em>POP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.POP
   * @generated
   */
  public Adapter createPOPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.LOAD <em>LOAD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.LOAD
   * @generated
   */
  public Adapter createLOADAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Register <em>Register</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Register
   * @generated
   */
  public Adapter createRegisterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Immediate <em>Immediate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Immediate
   * @generated
   */
  public Adapter createImmediateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.HexConst <em>Hex Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.HexConst
   * @generated
   */
  public Adapter createHexConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Direct <em>Direct</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Direct
   * @generated
   */
  public Adapter createDirectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.DirectReg <em>Direct Reg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.DirectReg
   * @generated
   */
  public Adapter createDirectRegAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.STORE <em>STORE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.STORE
   * @generated
   */
  public Adapter createSTOREAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.Address <em>Address</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.Address
   * @generated
   */
  public Adapter createAddressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.MOVE <em>MOVE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.MOVE
   * @generated
   */
  public Adapter createMOVEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.MoveValue <em>Move Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.MoveValue
   * @generated
   */
  public Adapter createMoveValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.ADD <em>ADD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.ADD
   * @generated
   */
  public Adapter createADDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.SUB <em>SUB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.SUB
   * @generated
   */
  public Adapter createSUBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.CMP <em>CMP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.CMP
   * @generated
   */
  public Adapter createCMPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.BEQ <em>BEQ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.BEQ
   * @generated
   */
  public Adapter createBEQAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.BranchAddress <em>Branch Address</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.BranchAddress
   * @generated
   */
  public Adapter createBranchAddressAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.BLT <em>BLT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.BLT
   * @generated
   */
  public Adapter createBLTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.BRANCH <em>BRANCH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.BRANCH
   * @generated
   */
  public Adapter createBRANCHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.BLINK <em>BLINK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.centralesupelec.infonum.sl.miniarm.miniARM.BLINK
   * @generated
   */
  public Adapter createBLINKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MiniARMAdapterFactory
