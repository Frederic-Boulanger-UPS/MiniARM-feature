/**
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.miniARM.impl;

import fr.centralesupelec.infonum.sl.miniarm.miniARM.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MiniARMFactoryImpl extends EFactoryImpl implements MiniARMFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MiniARMFactory init()
  {
    try
    {
      MiniARMFactory theMiniARMFactory = (MiniARMFactory)EPackage.Registry.INSTANCE.getEFactory(MiniARMPackage.eNS_URI);
      if (theMiniARMFactory != null)
      {
        return theMiniARMFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MiniARMFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniARMFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MiniARMPackage.PROGRAM: return createProgram();
      case MiniARMPackage.LINE: return createLine();
      case MiniARMPackage.INCLUDE: return createInclude();
      case MiniARMPackage.LABEL_DEF: return createLabelDef();
      case MiniARMPackage.LABEL: return createLabel();
      case MiniARMPackage.INSTRUCTION: return createInstruction();
      case MiniARMPackage.ASSEMBLY_INST: return createAssemblyInst();
      case MiniARMPackage.PSEUDO_INST: return createPseudoInst();
      case MiniARMPackage.REAL_INST: return createRealInst();
      case MiniARMPackage.RMW: return createRMW();
      case MiniARMPackage.SMW: return createSMW();
      case MiniARMPackage.SMS: return createSMS();
      case MiniARMPackage.PUSH: return createPUSH();
      case MiniARMPackage.POP: return createPOP();
      case MiniARMPackage.LOAD: return createLOAD();
      case MiniARMPackage.REGISTER: return createRegister();
      case MiniARMPackage.IMMEDIATE: return createImmediate();
      case MiniARMPackage.VALUE: return createValue();
      case MiniARMPackage.CONST: return createConst();
      case MiniARMPackage.HEX_CONST: return createHexConst();
      case MiniARMPackage.DIRECT: return createDirect();
      case MiniARMPackage.DIRECT_REG: return createDirectReg();
      case MiniARMPackage.STORE: return createSTORE();
      case MiniARMPackage.ADDRESS: return createAddress();
      case MiniARMPackage.MOVE: return createMOVE();
      case MiniARMPackage.MOVE_VALUE: return createMoveValue();
      case MiniARMPackage.ADD: return createADD();
      case MiniARMPackage.SUB: return createSUB();
      case MiniARMPackage.CMP: return createCMP();
      case MiniARMPackage.BEQ: return createBEQ();
      case MiniARMPackage.BRANCH_ADDRESS: return createBranchAddress();
      case MiniARMPackage.BLT: return createBLT();
      case MiniARMPackage.BRANCH: return createBRANCH();
      case MiniARMPackage.BLINK: return createBLINK();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Line createLine()
  {
    LineImpl line = new LineImpl();
    return line;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelDef createLabelDef()
  {
    LabelDefImpl labelDef = new LabelDefImpl();
    return labelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssemblyInst createAssemblyInst()
  {
    AssemblyInstImpl assemblyInst = new AssemblyInstImpl();
    return assemblyInst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PseudoInst createPseudoInst()
  {
    PseudoInstImpl pseudoInst = new PseudoInstImpl();
    return pseudoInst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealInst createRealInst()
  {
    RealInstImpl realInst = new RealInstImpl();
    return realInst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RMW createRMW()
  {
    RMWImpl rmw = new RMWImpl();
    return rmw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SMW createSMW()
  {
    SMWImpl smw = new SMWImpl();
    return smw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SMS createSMS()
  {
    SMSImpl sms = new SMSImpl();
    return sms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PUSH createPUSH()
  {
    PUSHImpl push = new PUSHImpl();
    return push;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public POP createPOP()
  {
    POPImpl pop = new POPImpl();
    return pop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LOAD createLOAD()
  {
    LOADImpl load = new LOADImpl();
    return load;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Register createRegister()
  {
    RegisterImpl register = new RegisterImpl();
    return register;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Immediate createImmediate()
  {
    ImmediateImpl immediate = new ImmediateImpl();
    return immediate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Const createConst()
  {
    ConstImpl const_ = new ConstImpl();
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HexConst createHexConst()
  {
    HexConstImpl hexConst = new HexConstImpl();
    return hexConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Direct createDirect()
  {
    DirectImpl direct = new DirectImpl();
    return direct;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DirectReg createDirectReg()
  {
    DirectRegImpl directReg = new DirectRegImpl();
    return directReg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STORE createSTORE()
  {
    STOREImpl store = new STOREImpl();
    return store;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Address createAddress()
  {
    AddressImpl address = new AddressImpl();
    return address;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MOVE createMOVE()
  {
    MOVEImpl move = new MOVEImpl();
    return move;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveValue createMoveValue()
  {
    MoveValueImpl moveValue = new MoveValueImpl();
    return moveValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ADD createADD()
  {
    ADDImpl add = new ADDImpl();
    return add;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SUB createSUB()
  {
    SUBImpl sub = new SUBImpl();
    return sub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CMP createCMP()
  {
    CMPImpl cmp = new CMPImpl();
    return cmp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BEQ createBEQ()
  {
    BEQImpl beq = new BEQImpl();
    return beq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BranchAddress createBranchAddress()
  {
    BranchAddressImpl branchAddress = new BranchAddressImpl();
    return branchAddress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLT createBLT()
  {
    BLTImpl blt = new BLTImpl();
    return blt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BRANCH createBRANCH()
  {
    BRANCHImpl branch = new BRANCHImpl();
    return branch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BLINK createBLINK()
  {
    BLINKImpl blink = new BLINKImpl();
    return blink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MiniARMPackage getMiniARMPackage()
  {
    return (MiniARMPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MiniARMPackage getPackage()
  {
    return MiniARMPackage.eINSTANCE;
  }

} //MiniARMFactoryImpl
