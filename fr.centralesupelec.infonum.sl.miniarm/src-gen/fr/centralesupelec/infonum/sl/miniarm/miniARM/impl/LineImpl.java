/**
 * generated by Xtext 2.27.0
 */
package fr.centralesupelec.infonum.sl.miniarm.miniARM.impl;

import fr.centralesupelec.infonum.sl.miniarm.miniARM.Instruction;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.LabelDef;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.Line;
import fr.centralesupelec.infonum.sl.miniarm.miniARM.MiniARMPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.impl.LineImpl#getLabelDef <em>Label Def</em>}</li>
 *   <li>{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.impl.LineImpl#getInst <em>Inst</em>}</li>
 *   <li>{@link fr.centralesupelec.infonum.sl.miniarm.miniARM.impl.LineImpl#getComment <em>Comment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LineImpl extends MinimalEObjectImpl.Container implements Line
{
  /**
   * The cached value of the '{@link #getLabelDef() <em>Label Def</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelDef()
   * @generated
   * @ordered
   */
  protected LabelDef labelDef;

  /**
   * The cached value of the '{@link #getInst() <em>Inst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInst()
   * @generated
   * @ordered
   */
  protected Instruction inst;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniARMPackage.Literals.LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelDef getLabelDef()
  {
    return labelDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabelDef(LabelDef newLabelDef, NotificationChain msgs)
  {
    LabelDef oldLabelDef = labelDef;
    labelDef = newLabelDef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniARMPackage.LINE__LABEL_DEF, oldLabelDef, newLabelDef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelDef(LabelDef newLabelDef)
  {
    if (newLabelDef != labelDef)
    {
      NotificationChain msgs = null;
      if (labelDef != null)
        msgs = ((InternalEObject)labelDef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniARMPackage.LINE__LABEL_DEF, null, msgs);
      if (newLabelDef != null)
        msgs = ((InternalEObject)newLabelDef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniARMPackage.LINE__LABEL_DEF, null, msgs);
      msgs = basicSetLabelDef(newLabelDef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniARMPackage.LINE__LABEL_DEF, newLabelDef, newLabelDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction getInst()
  {
    return inst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInst(Instruction newInst, NotificationChain msgs)
  {
    Instruction oldInst = inst;
    inst = newInst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniARMPackage.LINE__INST, oldInst, newInst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInst(Instruction newInst)
  {
    if (newInst != inst)
    {
      NotificationChain msgs = null;
      if (inst != null)
        msgs = ((InternalEObject)inst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniARMPackage.LINE__INST, null, msgs);
      if (newInst != null)
        msgs = ((InternalEObject)newInst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniARMPackage.LINE__INST, null, msgs);
      msgs = basicSetInst(newInst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniARMPackage.LINE__INST, newInst, newInst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniARMPackage.LINE__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniARMPackage.LINE__LABEL_DEF:
        return basicSetLabelDef(null, msgs);
      case MiniARMPackage.LINE__INST:
        return basicSetInst(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniARMPackage.LINE__LABEL_DEF:
        return getLabelDef();
      case MiniARMPackage.LINE__INST:
        return getInst();
      case MiniARMPackage.LINE__COMMENT:
        return getComment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniARMPackage.LINE__LABEL_DEF:
        setLabelDef((LabelDef)newValue);
        return;
      case MiniARMPackage.LINE__INST:
        setInst((Instruction)newValue);
        return;
      case MiniARMPackage.LINE__COMMENT:
        setComment((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniARMPackage.LINE__LABEL_DEF:
        setLabelDef((LabelDef)null);
        return;
      case MiniARMPackage.LINE__INST:
        setInst((Instruction)null);
        return;
      case MiniARMPackage.LINE__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniARMPackage.LINE__LABEL_DEF:
        return labelDef != null;
      case MiniARMPackage.LINE__INST:
        return inst != null;
      case MiniARMPackage.LINE__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (comment: ");
    result.append(comment);
    result.append(')');
    return result.toString();
  }

} //LineImpl
